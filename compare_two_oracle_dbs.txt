import pandas as pd
import oracledb as orcl
import math

import numpy as np

# Oracle Connection Details
#DB Server1

src_server = 'localhost'  # for a named instance
src_user_name = 'hr'
src_pwd = 'hr'
src_port = '1521'
src_service_name = 'xe'

#DB Server2

trg_server = 'localhost'  # for a named instance
trg_user_name = 'newhr'
trg_pwd = 'newhr'
trg_port = '1521'
trg_service_name = 'xe'

src_sql_stmt_db_objects="select OWNER, OBJECT_NAME, OBJECT_TYPE from dba_objects where owner in ('HR') and object_type not in ('INDEX') order by OWNER, OBJECT_NAME, OBJECT_TYPE"
trg_sql_stmt_db_objects="select 'HR' OWNER, OBJECT_NAME, OBJECT_TYPE from dba_objects where owner in ('NEWHR') and object_type not in ('INDEX') order by OWNER, OBJECT_NAME, OBJECT_TYPE"

src_sql_stmt_db_columns="select OWNER, TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH SRC_DATA_LENGTH, DATA_PRECISION SRC_DATA_PRECISION from DBA_TAB_COLUMNS where owner in ('HR') order by OWNER, TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION"
trg_sql_stmt_db_columns="select 'HR' OWNER, TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH TRG_DATA_LENGTH, DATA_PRECISION TRG_DATA_PRECISION from DBA_TAB_COLUMNS where owner in ('NEWHR') order by OWNER, TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION"


#FILE VARIABLE


def compare_dataframes(df1, df2, on_columns):
    df = pd.merge(df1, df2, on=on_columns , how='left', indicator='WHERE_EXISTS')
    df['EXISTS'] = np.where(df.WHERE_EXISTS == 'both', True, False)
    df['WHERE_EXISTS'] = df['WHERE_EXISTS'].map({'both': 'BOTH', 'left_only': 'DB1'})
    return  df;

#function for getting oracle DB connection
#get_snowflake_database_connection(db_type,snowflake_user,snowflake_password,snowflake_account,snowflake_warehouse,snowflake_database,snowflake_schema):
def get_oracle_database_connection(dbserver,dbusername,dbpwd,dbport,dbservicename):
    dsn = f'{dbusername}/{dbpwd}@{dbserver}:{dbport}/{dbservicename}'
    sql_cnxn = orcl.connect(dsn)
    return sql_cnxn;

def get_results_from_query(sql_cnxn, sql_stmt):
    df =pd.read_sql(sql_stmt,sql_cnxn);
    return df;


def gnereate_sql_file_from_excel(file_name):
    input_df = pd.read_excel(file_name)
    f = open("alters_for_tables.sql", "w")
    for index, row in input_df.iterrows():
        if row['WHERE_EXISTS']=='DB1':
            owner_name_for_alter  = row["OWNER"]
            table_name_for_alter  = row["TABLE_NAME"]
            column_name_for_alter =  row["COLUMN_NAME"]
            datatype_name_for_alter = row["DATA_TYPE"]
            data_length_for_alter = row["SRC_DATA_LENGTH"]
            data_precision_for_alter = row["SRC_DATA_PRECISION"]
            if math.isnan(data_precision_for_alter):
                sql_statement = ' alter ' + owner_name_for_alter + '.' + table_name_for_alter + 'ADD COLUMN (' + column_name_for_alter + ' ' + datatype_name_for_alter + '(' + str(data_length_for_alter) + ');'
            else:
                data_precision_for_alter = int(data_precision_for_alter)
                sql_statement = ' alter ' + owner_name_for_alter + '.' + table_name_for_alter + 'ADD COLUMN (' + column_name_for_alter + ' ' + datatype_name_for_alter + '(' + str(data_length_for_alter) + ',' + str(data_precision_for_alter) + ');'
            #print(sql_statement);
            f.write(sql_statement + '\n')
    f.close()


def gnereate_ddl_file_for_mising_objects(src_conn,file_name):
    input_df = pd.read_excel(file_name)
    cur = src_conn.cursor()
    owner_name_for_ddl =""
    object_name_for_ddl =""
    object_type_for_ddl =""
    for index, row in input_df.iterrows():
        if row['WHERE_EXISTS']=='DB1':
            owner_name_for_ddl = row["OWNER"]
            object_name_for_ddl  = row["OBJECT_NAME"]
            object_type_for_ddl =  row["OBJECT_TYPE"]
            file_name_for_ddl = owner_name_for_ddl + '_' + object_name_for_ddl + '_' + object_type_for_ddl + '.sql'
            f = open(file_name_for_ddl, "w");
            ddl_sql_for_execution = "select dbms_metadata.get_ddl('" + object_type_for_ddl + "','" + object_name_for_ddl + "','" + owner_name_for_ddl + "') DDL_SQL from dual"
            print(ddl_sql_for_execution)
            cur.execute(ddl_sql_for_execution)
            res = cur.fetchall()
            print(res[0]);
            f.write(res[0][0] + '\n')
            f.close()
            break;
    cur.close();

if __name__ == "__main__":

    #Creating DB connection and getting table row count
    orcl.init_oracle_client()
    orcl.defaults.fetch_lobs = False
    src_sql_cnxn=get_oracle_database_connection(src_server,src_user_name,src_pwd,src_port,src_service_name);
    print('Connected to source oracle')
    trg_sql_cnxn = get_oracle_database_connection(trg_server, trg_user_name, trg_pwd, trg_port, trg_service_name);
    print('Connected to target oracle')
    #Getting details for DB objects
    src_df = get_results_from_query(src_sql_cnxn, src_sql_stmt_db_objects)
    src_df.to_excel("SRC_DF_FOR_OBJECTS.xlsx", index=False)
    trg_df=get_results_from_query(trg_sql_cnxn,trg_sql_stmt_db_objects)
    trg_df.to_excel("TRG_DF_FOR_OBJECTS.xlsx", index=False)
    db_objects_diff=compare_dataframes(src_df,trg_df,['OWNER', 'OBJECT_NAME','OBJECT_TYPE'])
    db_objects_diff.to_excel("DB_OBJECTS_DIFF.xlsx", index=False)

    #getting details for db colummns

    src_cols_df = get_results_from_query(src_sql_cnxn, src_sql_stmt_db_columns)
    src_cols_df.to_excel("SRC_DF_FOR_COLUMNS.xlsx", index=False)
    trg_cols_df = get_results_from_query(trg_sql_cnxn, trg_sql_stmt_db_columns)
    trg_cols_df.to_excel("TRG_DF_FOR_COLUMNS.xlsx", index=False)
    db_columns_diff = compare_dataframes(src_cols_df, trg_cols_df,['OWNER', 'TABLE_NAME', 'COLUMN_NAME', 'DATA_TYPE'])
    db_columns_diff.to_excel("DB_COLUMNS_DIFF.xlsx", index=False)

    gnereate_sql_file_from_excel("DB_COLUMNS_DIFF.xlsx")
    gnereate_ddl_file_for_mising_objects(src_sql_cnxn,"DB_OBJECTS_DIFF.xlsx")
    src_sql_cnxn.close();
    trg_sql_cnxn.close();

    print('Script Executed Successfully please validate generated output files')
